(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.OptKit = factory());
}(this, (function () { 'use strict';

    function noop() { }
    const identity = x => x;
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.wholeText !== data)
            text.data = data;
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }
    function attribute_to_object(attributes) {
        const result = {};
        for (const attribute of attributes) {
            result[attribute.name] = attribute.value;
        }
        return result;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = node.ownerDocument;
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    let SvelteElement;
    if (typeof HTMLElement === 'function') {
        SvelteElement = class extends HTMLElement {
            constructor() {
                super();
                this.attachShadow({ mode: 'open' });
            }
            connectedCallback() {
                const { on_mount } = this.$$;
                this.$$.on_disconnect = on_mount.map(run).filter(is_function);
                // @ts-ignore todo: improve typings
                for (const key in this.$$.slotted) {
                    // @ts-ignore todo: improve typings
                    this.appendChild(this.$$.slotted[key]);
                }
            }
            attributeChangedCallback(attr, _oldValue, newValue) {
                this[attr] = newValue;
            }
            disconnectedCallback() {
                run_all(this.$$.on_disconnect);
            }
            $destroy() {
                destroy_component(this, 1);
                this.$destroy = noop;
            }
            $on(type, callback) {
                // TODO should this delegate to addEventListener?
                const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
                callbacks.push(callback);
                return () => {
                    const index = callbacks.indexOf(callback);
                    if (index !== -1)
                        callbacks.splice(index, 1);
                };
            }
            $set($$props) {
                if (this.$$set && !is_empty($$props)) {
                    this.$$.skip_bound = true;
                    this.$$set($$props);
                    this.$$.skip_bound = false;
                }
            }
        };
    }

    function backOut(t) {
        const s = 1.70158;
        return --t * t * ((s + 1) * t + s) + 1;
    }
    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }

    /* src/components/OptKit/OptKit.svelte generated by Svelte v3.32.3 */

    const { window: window_1 } = globals;

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[50] = list[i];
    	child_ctx[52] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[53] = list[i].value !== undefined ? list[i].value : "";
    	child_ctx[54] = list[i].label !== undefined ? list[i].label : "";
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[57] = list[i];
    	return child_ctx;
    }

    // (188:0) {#if alerts && alerts.length > 0}
    function create_if_block_7(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value_2 = /*alerts*/ ctx[6];
    	const get_key = ctx => /*toast*/ ctx[57]._id;

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2(ctx, each_value_2, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "wrapper");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*fadeOut, removeAlert, alerts*/ 2621504) {
    				each_value_2 = /*alerts*/ ctx[6];
    				group_outros();
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, div, outro_and_destroy_block, create_each_block_2, null, get_each_context_2);
    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};
    }

    // (190:4) {#each alerts as toast (toast._id)}
    function create_each_block_2(key_1, ctx) {
    	let div1;
    	let div0;
    	let t0_value = /*toast*/ ctx[57].msg + "";
    	let t0;
    	let t1;
    	let button;
    	let t2;
    	let div1_intro;
    	let div1_outro;
    	let current;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[25](/*toast*/ ctx[57], ...args);
    	}

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[26](/*toast*/ ctx[57], ...args);
    	}

    	return {
    		key: key_1,
    		first: null,
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			button = element("button");
    			button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line data-v-4c034fe6="" x1="18" y1="6" x2="6" y2="18"></line><line data-v-4c034fe6="" x1="6" y1="6" x2="18" y2="18"></line></svg>`;
    			t2 = space();
    			attr(div0, "class", "p-2");
    			attr(button, "type", "button");
    			attr(button, "class", "close");
    			attr(div1, "class", "modal");
    			this.first = div1;
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, t0);
    			append(div1, t1);
    			append(div1, button);
    			append(div1, t2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(button, "click", click_handler),
    					listen(div1, "click", click_handler_1)
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*alerts*/ 64) && t0_value !== (t0_value = /*toast*/ ctx[57].msg + "")) set_data(t0, t0_value);
    		},
    		i(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div1_outro) div1_outro.end(1);
    				if (!div1_intro) div1_intro = create_in_transition(div1, fly, /*flyIn*/ ctx[20]);
    				div1_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			if (div1_intro) div1_intro.invalidate();
    			div1_outro = create_out_transition(div1, fade, /*fadeOut*/ ctx[21]);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			if (detaching && div1_outro) div1_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (221:0) {#if showConfirm}
    function create_if_block_5(ctx) {
    	let div2;
    	let div1;
    	let button0;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let nav;
    	let button1;
    	let t5;
    	let button2;
    	let t6;
    	let button2_disabled_value;
    	let div1_intro;
    	let div1_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*password*/ ctx[0] && create_if_block_6(ctx);

    	return {
    		c() {
    			div2 = element("div");
    			div1 = element("div");
    			button0 = element("button");
    			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-svg feather feather-x"><line data-v-4c034fe6="" x1="18" y1="6" x2="6" y2="18"></line><line data-v-4c034fe6="" x1="6" y1="6" x2="18" y2="18"></line></svg>`;
    			t0 = space();
    			div0 = element("div");
    			t1 = text(/*showConfirm*/ ctx[3]);
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			nav = element("nav");
    			button1 = element("button");
    			button1.textContent = "Cancel";
    			t5 = space();
    			button2 = element("button");
    			t6 = text("Ok");
    			attr(button0, "type", "button");
    			attr(button0, "class", "close focus:ring focus:outline-none");
    			attr(div0, "class", "my-10");
    			attr(button1, "class", "btn cancel");
    			attr(button2, "class", "btn ok");
    			button2.disabled = button2_disabled_value = /*password*/ ctx[0] && /*confirmPassword*/ ctx[1] !== /*password*/ ctx[0];
    			attr(nav, "class", "");
    			attr(div1, "class", "modal");
    			attr(div2, "class", "backdrop");
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div1);
    			append(div1, button0);
    			append(div1, t0);
    			append(div1, div0);
    			append(div0, t1);
    			append(div0, t2);
    			if (if_block) if_block.m(div0, null);
    			append(div1, t3);
    			append(div1, nav);
    			append(nav, button1);
    			append(nav, t5);
    			append(nav, button2);
    			append(button2, t6);
    			/*div1_binding*/ ctx[28](div1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(button0, "click", function () {
    						if (is_function(/*denyConfirm*/ ctx[5])) /*denyConfirm*/ ctx[5].apply(this, arguments);
    					}),
    					listen(button1, "click", function () {
    						if (is_function(/*denyConfirm*/ ctx[5])) /*denyConfirm*/ ctx[5].apply(this, arguments);
    					}),
    					listen(button2, "click", function () {
    						if (is_function(/*acceptConfirm*/ ctx[4])) /*acceptConfirm*/ ctx[4].apply(this, arguments);
    					}),
    					listen(div1, "click", click_handler_2),
    					listen(div2, "click", function () {
    						if (is_function(/*denyConfirm*/ ctx[5])) /*denyConfirm*/ ctx[5].apply(this, arguments);
    					})
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (!current || dirty[0] & /*showConfirm*/ 8) set_data(t1, /*showConfirm*/ ctx[3]);

    			if (/*password*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty[0] & /*password, confirmPassword*/ 3 && button2_disabled_value !== (button2_disabled_value = /*password*/ ctx[0] && /*confirmPassword*/ ctx[1] !== /*password*/ ctx[0])) {
    				button2.disabled = button2_disabled_value;
    			}
    		},
    		i(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div1_outro) div1_outro.end(1);
    				if (!div1_intro) div1_intro = create_in_transition(div1, fly, /*flyIn*/ ctx[20]);
    				div1_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			if (div1_intro) div1_intro.invalidate();
    			div1_outro = create_out_transition(div1, fade, /*fadeOut*/ ctx[21]);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			if (if_block) if_block.d();
    			/*div1_binding*/ ctx[28](null);
    			if (detaching && div1_outro) div1_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (252:8) {#if password}
    function create_if_block_6(ctx) {
    	let label;
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let input;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			label = element("label");
    			div = element("div");
    			t0 = text("Type \"");
    			t1 = text(/*password*/ ctx[0]);
    			t2 = text("\" to confirm:");
    			t3 = space();
    			input = element("input");
    			attr(div, "class", "");
    			attr(input, "placeholder", /*password*/ ctx[0]);
    			attr(input, "class", "input");
    		},
    		m(target, anchor) {
    			insert(target, label, anchor);
    			append(label, div);
    			append(div, t0);
    			append(div, t1);
    			append(div, t2);
    			append(label, t3);
    			append(label, input);
    			set_input_value(input, /*confirmPassword*/ ctx[1]);

    			if (!mounted) {
    				dispose = listen(input, "input", /*input_input_handler*/ ctx[27]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*password*/ 1) set_data(t1, /*password*/ ctx[0]);

    			if (dirty[0] & /*password*/ 1) {
    				attr(input, "placeholder", /*password*/ ctx[0]);
    			}

    			if (dirty[0] & /*confirmPassword*/ 2 && input.value !== /*confirmPassword*/ ctx[1]) {
    				set_input_value(input, /*confirmPassword*/ ctx[1]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(label);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (281:0) {#if showPrompt}
    function create_if_block_1(ctx) {
    	let div5;
    	let div4;
    	let nav;
    	let t0;
    	let button0;
    	let t1;
    	let div3;
    	let div1;
    	let div0;
    	let t2_value = (/*promptQuestion*/ ctx[11] || "") + "";
    	let t2;
    	let t3;
    	let t4;
    	let div2;
    	let button1;
    	let t5_value = (/*promptOptions*/ ctx[9].cancel || "Cancel") + "";
    	let t5;
    	let t6;
    	let button2;
    	let t7_value = (/*promptOptions*/ ctx[9].ok || "Ok") + "";
    	let t7;
    	let div4_intro;
    	let div4_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*promptOptions*/ ctx[9].headline && create_if_block_4(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*promptOptions*/ ctx[9].select) return create_if_block_2;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	return {
    		c() {
    			div5 = element("div");
    			div4 = element("div");
    			nav = element("nav");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			button0 = element("button");
    			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-svg feather feather-x"><line data-v-4c034fe6="" x1="18" y1="6" x2="6" y2="18"></line><line data-v-4c034fe6="" x1="6" y1="6" x2="18" y2="18"></line></svg>`;
    			t1 = space();
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			if_block1.c();
    			t4 = space();
    			div2 = element("div");
    			button1 = element("button");
    			t5 = text(t5_value);
    			t6 = space();
    			button2 = element("button");
    			t7 = text(t7_value);
    			attr(button0, "type", "button");
    			attr(button0, "class", "close focus:ring focus:outline-none");
    			attr(nav, "class", "");
    			attr(div0, "class", "p-2");
    			attr(div1, "class", "my-10");
    			attr(button1, "class", "btn cancel");
    			attr(button2, "tabindex", "0");
    			attr(button2, "class", "btn ok");
    			attr(div2, "class", "");
    			attr(div3, "class", "");
    			attr(div4, "class", "modal");
    			attr(div5, "class", "backdrop");
    		},
    		m(target, anchor) {
    			insert(target, div5, anchor);
    			append(div5, div4);
    			append(div4, nav);
    			if (if_block0) if_block0.m(nav, null);
    			append(nav, t0);
    			append(nav, button0);
    			append(div4, t1);
    			append(div4, div3);
    			append(div3, div1);
    			append(div1, div0);
    			append(div0, t2);
    			append(div1, t3);
    			if_block1.m(div1, null);
    			append(div3, t4);
    			append(div3, div2);
    			append(div2, button1);
    			append(button1, t5);
    			append(div2, t6);
    			append(div2, button2);
    			append(button2, t7);
    			/*div4_binding*/ ctx[36](div4);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(button0, "click", /*click_handler_3*/ ctx[29]),
    					listen(button1, "click", /*click_handler_4*/ ctx[34]),
    					listen(button2, "click", /*click_handler_5*/ ctx[35]),
    					listen(div4, "click", click_handler_6),
    					listen(div5, "click", /*click_handler_7*/ ctx[37])
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*promptOptions*/ ctx[9].headline) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					if_block0.m(nav, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty[0] & /*promptQuestion*/ 2048) && t2_value !== (t2_value = (/*promptQuestion*/ ctx[11] || "") + "")) set_data(t2, t2_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			}

    			if ((!current || dirty[0] & /*promptOptions*/ 512) && t5_value !== (t5_value = (/*promptOptions*/ ctx[9].cancel || "Cancel") + "")) set_data(t5, t5_value);
    			if ((!current || dirty[0] & /*promptOptions*/ 512) && t7_value !== (t7_value = (/*promptOptions*/ ctx[9].ok || "Ok") + "")) set_data(t7, t7_value);
    		},
    		i(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div4_outro) div4_outro.end(1);
    				if (!div4_intro) div4_intro = create_in_transition(div4, fly, /*flyIn*/ ctx[20]);
    				div4_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			if (div4_intro) div4_intro.invalidate();
    			div4_outro = create_out_transition(div4, fade, /*fadeOut*/ ctx[21]);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div5);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			/*div4_binding*/ ctx[36](null);
    			if (detaching && div4_outro) div4_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (291:8) {#if promptOptions.headline}
    function create_if_block_4(ctx) {
    	let h1;
    	let t_value = /*promptOptions*/ ctx[9].headline + "";
    	let t;

    	return {
    		c() {
    			h1 = element("h1");
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, h1, anchor);
    			append(h1, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promptOptions*/ 512 && t_value !== (t_value = /*promptOptions*/ ctx[9].headline + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(h1);
    		}
    	};
    }

    // (330:10) {:else}
    function create_else_block(ctx) {
    	let t;
    	let input;
    	let input_placeholder_value;
    	let input_showerror_value;
    	let mounted;
    	let dispose;
    	let if_block = /*promptOptions*/ ctx[9].label && create_if_block_3(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			t = space();
    			input = element("input");
    			attr(input, "id", "prompt");
    			attr(input, "class", "input");
    			attr(input, "type", "text");
    			attr(input, "placeholder", input_placeholder_value = /*promptOptions*/ ctx[9].placeholder || "");
    			input.required = true;
    			attr(input, "showerror", input_showerror_value = /*promptErr*/ ctx[8] && !/*promptAnswer*/ ctx[12]);
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, t, anchor);
    			insert(target, input, anchor);
    			/*input_binding*/ ctx[32](input);
    			set_input_value(input, /*promptAnswer*/ ctx[12]);

    			if (!mounted) {
    				dispose = listen(input, "input", /*input_input_handler_1*/ ctx[33]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (/*promptOptions*/ ctx[9].label) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3(ctx);
    					if_block.c();
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*promptOptions*/ 512 && input_placeholder_value !== (input_placeholder_value = /*promptOptions*/ ctx[9].placeholder || "")) {
    				attr(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty[0] & /*promptErr, promptAnswer, promptOptions*/ 4864 && input_showerror_value !== (input_showerror_value = /*promptErr*/ ctx[8] && !/*promptAnswer*/ ctx[12])) {
    				attr(input, "showerror", input_showerror_value);
    			}

    			if (dirty[0] & /*promptAnswer, promptOptions*/ 4608 && input.value !== /*promptAnswer*/ ctx[12]) {
    				set_input_value(input, /*promptAnswer*/ ctx[12]);
    			}
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(t);
    			if (detaching) detach(input);
    			/*input_binding*/ ctx[32](null);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (319:10) {#if promptOptions.select}
    function create_if_block_2(ctx) {
    	let select;
    	let select_placeholder_value;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*promptOptions*/ ctx[9].select;
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	return {
    		c() {
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(select, "class", "input");
    			attr(select, "placeholder", select_placeholder_value = /*promptOptions*/ ctx[9].placeholder || "");
    			if (/*promptAnswer*/ ctx[12] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[31].call(select));
    		},
    		m(target, anchor) {
    			insert(target, select, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			/*select_binding*/ ctx[30](select);
    			select_option(select, /*promptAnswer*/ ctx[12]);

    			if (!mounted) {
    				dispose = listen(select, "change", /*select_change_handler*/ ctx[31]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promptOptions*/ 512) {
    				each_value_1 = /*promptOptions*/ ctx[9].select;
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty[0] & /*promptOptions*/ 512 && select_placeholder_value !== (select_placeholder_value = /*promptOptions*/ ctx[9].placeholder || "")) {
    				attr(select, "placeholder", select_placeholder_value);
    			}

    			if (dirty[0] & /*promptAnswer, promptOptions*/ 4608) {
    				select_option(select, /*promptAnswer*/ ctx[12]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(select);
    			destroy_each(each_blocks, detaching);
    			/*select_binding*/ ctx[30](null);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (331:12) {#if promptOptions.label}
    function create_if_block_3(ctx) {
    	let label;
    	let t_value = /*promptOptions*/ ctx[9].label + "";
    	let t;

    	return {
    		c() {
    			label = element("label");
    			t = text(t_value);
    			attr(label, "for", "prompt");
    		},
    		m(target, anchor) {
    			insert(target, label, anchor);
    			append(label, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promptOptions*/ 512 && t_value !== (t_value = /*promptOptions*/ ctx[9].label + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(label);
    		}
    	};
    }

    // (326:14) {#each promptOptions.select as {value="", label=""}}
    function create_each_block_1(ctx) {
    	let option;
    	let t_value = /*label*/ ctx[54] + "";
    	let t;
    	let option_value_value;

    	return {
    		c() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*value*/ ctx[53];
    			option.value = option.__value;
    		},
    		m(target, anchor) {
    			insert(target, option, anchor);
    			append(option, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promptOptions*/ 512 && t_value !== (t_value = /*label*/ ctx[54] + "")) set_data(t, t_value);

    			if (dirty[0] & /*promptOptions*/ 512 && option_value_value !== (option_value_value = /*value*/ ctx[53])) {
    				option.__value = option_value_value;
    				option.value = option.__value;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(option);
    		}
    	};
    }

    // (373:2) {#if menuItems.length > 0}
    function create_if_block(ctx) {
    	let div;
    	let each_value = /*menuItems*/ ctx[16];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*menuItems, menu*/ 8454144) {
    				each_value = /*menuItems*/ ctx[16];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (375:6) {#each menuItems as item, i}
    function create_each_block(ctx) {
    	let button;
    	let t0_value = /*item*/ ctx[50].label + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler_8(...args) {
    		return /*click_handler_8*/ ctx[38](/*item*/ ctx[50], ...args);
    	}

    	return {
    		c() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(button, "class", "btn");
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			append(button, t0);
    			append(button, t1);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler_8);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*menuItems*/ 65536 && t0_value !== (t0_value = /*item*/ ctx[50].label + "")) set_data(t0, t0_value);
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function create_fragment(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	add_render_callback(/*onwindowresize*/ ctx[24]);
    	let if_block0 = /*alerts*/ ctx[6] && /*alerts*/ ctx[6].length > 0 && create_if_block_7(ctx);
    	let if_block1 = /*showConfirm*/ ctx[3] && create_if_block_5(ctx);
    	let if_block2 = /*showPrompt*/ ctx[13] && create_if_block_1(ctx);
    	let if_block3 = /*menuItems*/ ctx[16].length > 0 && create_if_block(ctx);

    	return {
    		c() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			div = element("div");
    			if (if_block3) if_block3.c();
    			this.c = noop;
    			attr(div, "class", "menu");
    		},
    		m(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert(target, t2, anchor);
    			insert(target, div, anchor);
    			if (if_block3) if_block3.m(div, null);
    			/*div_binding*/ ctx[39](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(window_1, "keydown", /*handleKeydown*/ ctx[22]),
    					listen(window_1, "resize", /*onwindowresize*/ ctx[24])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (/*alerts*/ ctx[6] && /*alerts*/ ctx[6].length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*alerts*/ 64) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_7(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*showConfirm*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*showConfirm*/ 8) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*showPrompt*/ ctx[13]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*showPrompt*/ 8192) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(t2.parentNode, t2);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*menuItems*/ ctx[16].length > 0) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block(ctx);
    					if_block3.c();
    					if_block3.m(div, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach(t2);
    			if (detaching) detach(div);
    			if (if_block3) if_block3.d();
    			/*div_binding*/ ctx[39](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    const click_handler_2 = e => e.cancelBubble = true;
    const click_handler_6 = e => e.cancelBubble = true;

    function instance($$self, $$props, $$invalidate) {
    	let password, confirmPassword;
    	let confirmEl, showConfirm, acceptConfirm, denyConfirm;

    	const confirm = async (msg, pw) => new Promise((resolve, reject) => {
    			$$invalidate(0, password = pw);
    			$$invalidate(1, confirmPassword = "");
    			document.body.style.overflow = "hidden";
    			$$invalidate(3, showConfirm = msg);
    			setTimeout(() => confirmEl.focus(), 100);

    			$$invalidate(4, acceptConfirm = () => {
    				$$invalidate(3, showConfirm = false);
    				document.body.style.overflow = null;
    				resolve(true);
    			});

    			$$invalidate(5, denyConfirm = () => {
    				$$invalidate(3, showConfirm = false);
    				document.body.style.overflow = null;
    				resolve(false);
    			});
    		});

    	let alerts = [];
    	let callback;
    	let alertId = 0;

    	const alert = (msg = "", type = "notification", autoHide = true, onClose = false, retainMs = 3500) => {
    		let _id = ++alertId;
    		$$invalidate(6, alerts = [...alerts, { _id, msg, type }]);

    		if (autoHide) {
    			setTimeout(
    				() => {
    					removeAlert(_id);
    				},
    				retainMs
    			);
    		}

    		if (onClose) callback = onClose;
    	};

    	const removeAlert = _id => {
    		$$invalidate(6, alerts = alerts.filter((a, i) => a._id !== _id));
    		if (callback) callback();
    	};

    	let promptEl,
    		promptErr,
    		promptOptions,
    		promptInput,
    		promptQuestion,
    		promptAnswer,
    		showPrompt,
    		resolvePrompt;

    	let prompt = (question, options = {}) => new Promise(async (resolve, reject) => {
    			document.body.style.overflow = "hidden";
    			$$invalidate(8, promptErr = false);
    			$$invalidate(13, showPrompt = true);
    			$$invalidate(12, promptAnswer = "");
    			$$invalidate(11, promptQuestion = question);
    			$$invalidate(9, promptOptions = options);
    			await tick();
    			promptInput.focus();

    			$$invalidate(14, resolvePrompt = async to => {
    				$$invalidate(13, showPrompt = false);
    				resolve(to);
    				await tick();
    				$$invalidate(12, promptAnswer = null);
    				document.body.style.overflow = null;
    			});
    		});

    	const flyIn = {
    		delay: 0,
    		duration: 200,
    		x: 0,
    		y: 50,
    		opacity: 0.1,
    		easing: backOut
    	};

    	const fadeOut = { duration: 100, opacity: 0 };

    	function handleKeydown(event) {
    		let key = event.key;
    		event.keyCode;

    		if (showConfirm) {
    			if (key === "Enter") {
    				acceptConfirm();
    			}

    			if (key === "Escape") {
    				denyConfirm();
    			}
    		}

    		if (showPrompt) {
    			if (key === "Enter") {
    				resolvePrompt(promptAnswer);
    			}

    			if (key === "Escape") {
    				resolvePrompt(null);
    			}
    		}
    	}

    	let menuEl;
    	let menuVisible = false;
    	let menuItems = [];
    	let innerWidth;

    	function menu(e, items) {
    		console.log("menu()", { e, items });

    		if (menuVisible || !e) {
    			toggleMenu("hide");
    			window.removeEventListener("click", windowToggle);
    			setUp = false;
    		} else {
    			window.addEventListener("click", windowToggle);
    			e && e.preventDefault && e.preventDefault();
    			$$invalidate(16, menuItems = items);
    			open(e);
    		}
    	}

    	function open(e) {
    		console.log("open()", { e });

    		if (!menuItems || menuItems.length === 0) {
    			console.error("No menu() Items Found");
    			return true;
    		}

    		const x = e.clientX;
    		const y = e.clientY;
    		const origin = { left: x, top: y };
    		setPosition(origin);
    		return false;
    	}

    	const setPosition = ({ top, left }) => {
    		if (!menuEl) return;
    		let outOfBounds = left + 160 > innerWidth;
    		$$invalidate(15, menuEl.style.left = `${!outOfBounds ? left : left - 160}px`, menuEl);
    		$$invalidate(15, menuEl.style.top = `${top}px`, menuEl);
    		toggleMenu("show");
    	};

    	const toggleMenu = async command => {
    		console.log("toggleMenu()", { command });

    		if (!menuEl || menuItems.length === 0) {
    			return;
    		}

    		$$invalidate(15, menuEl.style.display = command === "show" ? "block" : "none", menuEl);
    		menuVisible = !menuVisible;
    	};

    	let setUp;

    	const windowToggle = () => {
    		if (!setUp) {
    			setUp = true;
    			return;
    		}

    		console.log("windowToggle()", { menuVisible, menuItems });
    		menu();
    	};

    	onMount(() => {
    		window.alert = alert;
    		window.prompt = prompt;
    		window.confirm = confirm;
    		window.menu = menu;
    	});

    	onDestroy(() => {
    		
    	});

    	function onwindowresize() {
    		$$invalidate(17, innerWidth = window_1.innerWidth);
    	}

    	const click_handler = (toast, _) => removeAlert(toast._id);
    	const click_handler_1 = (toast, _) => removeAlert(toast._id);

    	function input_input_handler() {
    		confirmPassword = this.value;
    		$$invalidate(1, confirmPassword);
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			confirmEl = $$value;
    			$$invalidate(2, confirmEl);
    		});
    	}

    	const click_handler_3 = _ => resolvePrompt(null);

    	function select_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			promptInput = $$value;
    			$$invalidate(10, promptInput);
    		});
    	}

    	function select_change_handler() {
    		promptAnswer = select_value(this);
    		$$invalidate(12, promptAnswer);
    		$$invalidate(9, promptOptions);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			promptInput = $$value;
    			$$invalidate(10, promptInput);
    		});
    	}

    	function input_input_handler_1() {
    		promptAnswer = this.value;
    		$$invalidate(12, promptAnswer);
    		$$invalidate(9, promptOptions);
    	}

    	const click_handler_4 = _ => resolvePrompt(null);

    	const click_handler_5 = _ => {
    		if (!promptAnswer) {
    			alert(promptOptions.errorMessage || "Required", "error");
    			$$invalidate(8, promptErr = true);
    			return;
    		}

    		resolvePrompt(promptAnswer);
    	};

    	function div4_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			promptEl = $$value;
    			$$invalidate(7, promptEl);
    		});
    	}

    	const click_handler_7 = e => $$invalidate(13, showPrompt = null);

    	const click_handler_8 = (item, e) => {
    		item.onClick && item.onClick();
    		menu();
    	};

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			menuEl = $$value;
    			$$invalidate(15, menuEl);
    		});
    	}

    	return [
    		password,
    		confirmPassword,
    		confirmEl,
    		showConfirm,
    		acceptConfirm,
    		denyConfirm,
    		alerts,
    		promptEl,
    		promptErr,
    		promptOptions,
    		promptInput,
    		promptQuestion,
    		promptAnswer,
    		showPrompt,
    		resolvePrompt,
    		menuEl,
    		menuItems,
    		innerWidth,
    		alert,
    		removeAlert,
    		flyIn,
    		fadeOut,
    		handleKeydown,
    		menu,
    		onwindowresize,
    		click_handler,
    		click_handler_1,
    		input_input_handler,
    		div1_binding,
    		click_handler_3,
    		select_binding,
    		select_change_handler,
    		input_binding,
    		input_input_handler_1,
    		click_handler_4,
    		click_handler_5,
    		div4_binding,
    		click_handler_7,
    		click_handler_8,
    		div_binding
    	];
    }

    class OptKit extends SvelteElement {
    	constructor(options) {
    		super();
    		this.shadowRoot.innerHTML = `<style>*{--tw-shadow:0 0 #0000}.wrapper{position:fixed;width:100%;left:0;right:0;top:0;pointer-events:none;z-index:2147483647;padding:1rem}.modal{background-color:white;position:relative;pointer-events:auto;padding:2rem 4rem;border:1px solid rgba(0, 0, 0, 0.06);border-radius:0.2rem;box-shadow:0 25px 50px -12px rgb(0 0 0 / 25%);background:#fff;margin:2rem auto;width:100%;max-width:20rem;word-break:break-word;overflow:hidden;text-align:center}.close{height:35px;width:35px;position:absolute;right:0;top:0;margin:1rem}.backdrop{background:rgba(26, 32, 44, 0.35);padding:1rem;position:fixed;width:100%;height:100%;left:0;right:0;top:0;bottom:0}.input{width:100%;padding-top:0.5rem;padding-bottom:0.5rem;padding:0.75rem;flex-grow:1;background-color:rgba(229, 231, 235, 1);border-width:1px;border-radius:0.25rem;font-family:inherit;font-size:100%;line-height:1.15;margin:0}.btn{font-weight:600;border-width:1px;padding-left:1rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;margin-right:1rem;font-weight:600;border-radius:0.25rem;line-height:inherit;cursor:pointer;background-image:none;-webkit-appearance:button;text-transform:none;font-family:inherit;font-size:100%;line-height:1.15;margin:0}.cancel{background-color:rgba(243, 244, 246, 1)}.ok{background-color:rgba(59, 130, 246, 1);color:rgba(255, 255, 255, 1)}.menu{position:fixed;z-index:2147483647;width:100%;max-width:160px;background:white;box-shadow:0 25px 50px -12px rgb(0 0 0 / 25%)}.menu .btn{width:100%;border-radius:0}.menu .btn:nth-child(1){border-top-left-radius:0.25rem;border-top-right-radius:0.25rem;border-bottom:0;margin-top:0}.menu .btn:last-child{border-top:0;border-bottom-left-radius:0.25rem;border-bottom-right-radius:0.25rem;margin-top:0}.my-10{margin-top:2.5rem;margin-bottom:2.5rem}.p-2{padding:0.5rem}</style>`;

    		init(
    			this,
    			{
    				target: this.shadowRoot,
    				props: attribute_to_object(this.attributes)
    			},
    			instance,
    			create_fragment,
    			safe_not_equal,
    			{},
    			[-1, -1]
    		);

    		if (options) {
    			if (options.target) {
    				insert(options.target, this, options.anchor);
    			}
    		}
    	}
    }

    customElements.define("opt-kit", OptKit);

    return OptKit;

})));
